# 组织所有代码在这
# Baldr
BALDR_HDRS = glob(["valhalla/baldr/*.h"]) + glob(["src/baldr/*.h"])
BALDR_SRCS = glob(["src/baldr/*.cc"])

# Loki
LOKI_HDRS = glob(["valhalla/loki/*.h"])
LOKI_SRCS = glob(["src/loki/*.cc"])

# Meili
MEILI_HDRS = glob(["valhalla/meili/*.h"])
MEILI_SRCS = glob(["src/meili/*.cc"], exclude = [
    "src/meili/valhalla_run_map_match.cc",
])

# midgard
MIDGARD_HDRS = glob(["valhalla/midgard/*.h"])
MIDGARD_SRCS = glob(["src/midgard/*.cc"])

# Mjolnir
MJOLNIR_HDRS = glob(["valhalla/mjolnir/*.h"]) + glob(["src/mjolnir/*.h"])
MJOLNIR_SRCS = glob(["src/mjolnir/*.cc"], exclude = [
    "src/mjolnir/valhalla_add_elevation.cc",
    "src/mjolnir/valhalla_add_predicted_traffic.cc",
    "src/mjolnir/valhalla_assign_speeds.cc",
    "src/mjolnir/valhalla_benchmark_admins.cc",
    "src/mjolnir/valhalla_build_admins.cc",
    "src/mjolnir/valhalla_build_connectivity.cc",
    "src/mjolnir/valhalla_build_statistics.cc",
    "src/mjolnir/valhalla_build_tiles.cc",
    "src/mjolnir/valhalla_convert_transit.cc",
    "src/mjolnir/valhalla_fetch_transit.cc",
    "src/mjolnir/valhalla_ingest_transit.cc",
    "src/mjolnir/valhalla_query_transit.cc",
    "src/mjolnir/valhalla_validate_transit.cc",
    "src/mjolnir/valhalla_ways_to_edges.cc",
])

# Odin
ODIN_HDRS = glob(["valhalla/odin/*.h"])
ODIN_SRCS = glob(["src/odin/*.cc"])

# Sif
SIF_HDRS = glob(["valhalla/sif/*.h"])
SIF_SRCS = glob(["src/sif/*.cc"])

# Skadi
SKADI_HDRS = glob(["valhalla/skadi/*.h"])
SKADI_SRCS = glob(["src/skadi/*.cc"])

# thor
THOR_HDRS = glob(["valhalla/thor/*.h"]) + glob(["src/thor/*.h"])
THOR_SRCS = glob(["src/thor/*.cc"])

# Tyr
TYR_HDRS = glob(["valhalla/tyr/*.h"]) + glob(["src/tyr/*.h"]) + [
    "src/tyr/route_serializer_osrm.cc",
    "src/tyr/route_serializer_valhalla.cc",
]
TYR_SRCS = glob(["src/tyr/*.cc"], exclude = [
    "src/tyr/route_serializer_osrm.cc",
    "src/tyr/route_serializer_valhalla.cc",
])

# Valhlla common
COMMON_HDRS = glob(["valhalla/*.h"])
# COMMON_HDRS = ["valhalla/valhalla.h", "valhalla/config.h", "valhalla/worker.h",
#                "valhalla/filesystem.h", "valhalla/macro.h",
#                "valhalla/proto_conversions.h", "valhalla/tile_server.h",]
COMMON_SRCS = glob(["src/*.cc"], exclude = [
    "src/valhalla_benchmark_adjacency_list.cc",
    "src/valhalla_benchmark_loki.cc",
    "src/valhalla_benchmark_skadi.cc",
    "src/valhalla_expand_bounding_box.cc",
    "src/valhalla_export_edges.cc",
    "src/valhalla_loki_worker.cc",
    "src/valhalla_odin_worker.cc",
    "src/valhalla_path_comparison.cc",
    "src/valhalla_run_isochrone.cc",
    "src/valhalla_run_matrix.cc",
    "src/valhalla_run_route.cc",
    "src/valhalla_service.cc",
    "src/valhalla_thor_worker.cc",
])


cc_library(
    name = "valhalla_core",
    hdrs = BALDR_HDRS + LOKI_HDRS + MEILI_HDRS + MIDGARD_HDRS + MJOLNIR_HDRS + ODIN_HDRS + SIF_HDRS + SKADI_HDRS + THOR_HDRS + TYR_HDRS + COMMON_HDRS,
    srcs = BALDR_SRCS + LOKI_SRCS + MEILI_SRCS + MIDGARD_SRCS + MJOLNIR_SRCS + ODIN_SRCS + SIF_SRCS + SKADI_SRCS + THOR_SRCS + TYR_SRCS + COMMON_SRCS,
    deps = [
        "//proto:api_cc_proto",
        "//proto:transit_cc_proto",
        "//proto:transit_fetch_cc_proto",
        # 还得包括两个osm的proto
        "@osm-binary//:osm_cc_proto_fileformat",
        "@osm-binary//:osm_cc_proto_osmformat",
        "@com_google_protobuf//:protobuf",
        "@boost//:libboost_filesystem",
        "@boost//:libboost_system",
        # "@boost//:algorithm",
        # third_party
        "@benchmark//:benchmark",
        "@cpp-statsd-client//:cpp-statsd-client",
        "@cxxopts//:cxxopts",
        "@date//:date",
        # windows专用，忽略
        # "@dirent//:dirent",
        "@googletest//:gtest",
        "@just_gtfs//:just_gtfs",
        "@libosmium//:libosmium",
        "@lz4//:lz4",
        "@microtar//:microtar",
        "@protozero//:protozero",
        # 构建python版本Valhalla用，暂时忽略
        # "@pybind11//:pybind11",
        "@rapidjson//:rapidjson",
        "@robin-hood-hashing//:robin-hood-hashing",
        # install deps 原本需要通过install 安装的也能走这依赖 sqlite3.h 是build生成的
        # 所以不适合在这引用，或者有办法直接引用系统内安装的
        # [备注]系统假若安装了，bazel会自动去搜索，不需要手动添加
        # "@sqlite3//:sqlite3",
        "@lua//:lua",
    ],
    includes = [
        "valhalla/baldr",
        "valhalla/loki",
        "valhalla/meili",
        "valhalla/midgard",
        "valhalla/mjolnir",
        "valhalla/odin",
        "valhalla/sif",
        "valhalla/skadi",
        "valhalla/thor",
        "valhalla/tyr",
        "valhalla",
        "valhalla/proto",
    ],
    copts = [
        "-std=c++17",
    ],
    linkopts = [
        # 使用gold编译器，Linux专属
        # "-fuse-ld=gold",
    ],
    alwayslink = 1,
)

#build tiles
cc_binary(
    name = "valhalla_build_tiles",
    srcs = [
        "src/mjolnir/valhalla_build_tiles.cc",
    ],
    deps = [
        ":valhalla_core",
    ]
)

# valhalla_service
# 主要是需要编译出这个二进制文件即可
cc_binary(
    name = "valhalla_service",
    srcs = ["src/valhalla_service.cc"],
    deps = [":valhalla_core"],
    copts = ["-std=c++17",],
)

#==========================test======
cc_library(
    name = "aid",
    hdrs = ["sunweitest/aid.h"],
    srcs = ["sunweitest/aid.cpp"],
    deps = [
        "//proto:api_cc_proto",
    ]
)


cc_binary(
    name = "test",
    srcs = glob(["sunweimain/*.cc"]), 
    # srcs = ["sunweitest/main.cc"],
    deps = [
        "//:aid",
        # "//:valhalla_core",
        # "//sunweitestproto:cc_proto_sunwei",
    ],
    copts = ["-std=c++17",],
    linkopts = [
        # 使用gold编译器，Linux专属
        # "-fuse-ld=gold",
    ],
)



